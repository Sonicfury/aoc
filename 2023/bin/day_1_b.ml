(* open Core *)

(* let input: string = In_channel.read_all "inputs/day_1.txt"  *)
(* let codes_list: string list = input  *)
(* |> String.split_lines *)

(* CHATGPT PROPOSAL *)
(**)
(* let rec replace_first_digit str = *)
(*   match str with *)
(*   | "" -> "" *)
(*   | _ -> *)
(*     let first_char = String.sub str 0 5 in *)
(*     let rest_of_str = String.sub str 5 (String.length str - 5) in *)
(*     match first_char with *)
(*     | "one" -> "1" ^ rest_of_str *)
(*     | "two" -> "2" ^ rest_of_str *)
(*     | "three" -> "3" ^ rest_of_str *)
(*     | "four" -> "4" ^ rest_of_str *)
(*     | "five" -> "5" ^ rest_of_str *)
(*     | "six" -> "6" ^ rest_of_str *)
(*     | "seven" -> "7" ^ rest_of_str *)
(*     | "eight" -> "8" ^ rest_of_str *)
(*     | "nine" -> "9"  ^ rest_of_str *)
(*     | _ -> first_char ^ replace_first_digit rest_of_str *)
(**)
(* let rec replace_last_digit str = *)
(*   match str with *)
(*   | "" -> "" *)
(*   | _ -> *)
(*     let last_char = String.sub str (String.length str - 5) 5 in *)
(*     let rest_of_str = String.sub str 0 (String.length str - 5) in *)
(*     match last_three_chars with *)
(*     | "one" -> "1" ^ rest_of_str *)
(*     | "two" -> "2" ^ rest_of_str *)
(*     | "three" -> "3" ^ rest_of_str *)
(*     | "four" -> "4" ^ rest_of_str *)
(*     | "five" -> "5" ^ rest_of_str *)
(*     | "six" -> "6" ^ rest_of_str *)
(*     | "seven" -> "7" ^ rest_of_str *)
(*     | "eight" -> "8" ^ rest_of_str *)
(*     | "nine" -> "9"  ^ rest_of_str *)
(*     | _ -> replace_last_digit rest_of_str ^ last_three_chars *)
(**)
(* let main () = *)
(*   let input_str = "dasdfeightwo1ninesdftwoeight" in *)
(*   let after_first_replacement = replace_first_digit input_str in *)
(*   let after_second_replacement = replace_last_digit after_first_replacement in *)
(**)
(*   Printf.printf "Chaine d'origine : %s\n" input_str; *)
(*   Printf.printf "Après le premier remplacement : %s\n" after_first_replacement; *)
(*   Printf.printf "Après le deuxième remplacement : %s\n" after_second_replacement *)
(**)
(* let () = main () *)

(**)
(* let find_first_and_last_digits str = *)
(*   let len = String.length str in *)
(*   let rec find_first_digit i = *)
(*     if i < len then *)
(*       match str.[i] with *)
(*       | '0' .. '9' as digit -> *)
(*         Some (int_of_string (String.make 1 digit)) *)
(*       | _ -> find_first_digit (i + 1) *)
(*     else *)
(*       None *)
(*   in *)
(*   let rec find_last_digit i = *)
(*     if i >= 0 then *)
(*       match str.[i] with *)
(*       | '0' .. '9' as digit -> *)
(*         Some (int_of_string (String.make 1 digit)) *)
(*       | _ -> find_last_digit (i - 1) *)
(*     else *)
(*       None *)
(*   in *)
(*   match (find_first_digit 0, find_last_digit (len - 1)) with *)
(*   | (Some first_digit, Some last_digit) -> Some (first_digit, last_digit) *)
(*   | _ -> None *)
(**)
(* let rec iterate_over_list lst counter =  *)
(*   match lst with  *)
(*   | [] -> Printf.printf "Somme: %d\n" counter *)
(*   | head :: tail -> *)
(*     let concat = (match find_first_and_last_digits head with *)
(*     | Some (first_digit, last_digit) ->  *)
(*         let digit_string = Fmt.str "%d%d" first_digit last_digit in *)
(*         int_of_string digit_string *)
(*     | None -> 0) in *)
(*     let new_total = counter + concat in *)
(*     iterate_over_list tail new_total *)
(*      *)
(* let () = *)
(*     iterate_over_list codes_list 0; *)
(**)
